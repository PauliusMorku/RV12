
constraint c_no_reset :=
	!m_rst;
end constraint;

constraint c_reset_overlap :=
	!rose(m_rst);
end constraint;

constraint c_no_debug :=
	if (!m_rst)
		c/dbg_stall == 0 &&
		c/du_flush == 0 &&
		c/du_stall == 0 &&
		c/du_stall_dly == 0 &&
		c/du_we_pc == 0;
	endif;
end constraint;

constraint c_rst_no_inc :=
	if (m_rst)
		PF_wcnt_inc == 0 &&
		IF_wcnt_inc == 0 &&
		ID_wcnt_inc == 0 &&
		EX_wcnt_inc == 0 &&
		ME_wcnt_inc == 0 &&
		WB_wcnt_inc == 0;
	endif;
end constraint;

constraint c_no_st_flush :=
	if (!m_rst)
		((c/st_flush == 0) || prev(m_rst));
	endif;
end constraint;

constraint c_imem_response_simple :=
	if (!m_rst)
		exists i in 0..v_imem_slack:
			next(if_parcel_valid,i) == 2'b11;
		end exists
	else
		(if_parcel_valid == 2'b00)
	endif &&
	((if_parcel_valid == 2'b11) || (if_parcel_valid == 2'b00)) &&
	(if_parcel_misaligned == 0) &&
	(if_parcel_page_fault == 0) &&
	(if_stall_nxt_pc == 0) &&

	// Clean the values if the parcel is not valid
	if (if_parcel_valid != 2'b11)
		(if_parcel == 32'h00000000) &&
		(if_parcel_pc == 32'h00000000)
	// else
	// 	(if_parcel == 32'h00000000)
	endif;
end constraint;

constraint c_imem_response_complex :=
	if (!m_rst)
		if (if_flush == 0)

			// Handle if_stall cases by retaining the values
			if (next(if_flush) == 0)
				if (if_stall == 1)
					(next(if_parcel_pc) == if_parcel_pc) &&
					(next(if_parcel) == if_parcel) &&
					(next(if_parcel_valid) == if_parcel_valid)
				endif
			endif &&

			// Make sure that a response exists for every request or there is a flush request
			exists i in 0..v_imem_slack:
				(
					(next(if_parcel_pc, i) == if_nxt_pc) &&
					(next(if_parcel_valid,i) == 2'b11)
				) ||
				(next(if_flush, i) == 1)
			end exists &&
			
			// Every occurance where pc matches has to be valid (helps to prevent some unwanted behaviour)
			foreach i in 0..v_imem_slack:
				if (next(if_flush, i) == 0)
					if (next(if_parcel_pc,i) == if_nxt_pc)
						(next(if_parcel_valid,i) == 2'b11)
					endif
				endif
			end foreach &&

			// Make sure once response occurs then it is valid till a flush occurs
			foreach i in 0..v_imem_slack:
				if ((next(if_flush, i) == 0) && (next(if_flush, i+1) == 0))
					if (next(if_parcel_pc,i) == if_nxt_pc)
						if (next(if_stall, i) == 0)
							(next(if_parcel_pc,i+1) == next(if_nxt_pc)) &&
							(next(if_parcel_valid,i+1) == 2'b11)
						endif
					endif	
				endif
			end foreach &&

			// Make sure that after flush all values are reset till the next response
			if (fell(if_flush) || fell(m_rst))
				foreach i in 0..v_imem_slack:
					if ((next(if_parcel_pc,i) != if_nxt_pc) && (next(if_parcel_valid, i-1) == 2'b00))
						(next(if_parcel_valid,i) == 2'b00)
					endif
				end foreach
			endif

		else
			// if_flush == 1
			if_parcel_valid == 2'b00
		endif
	else
		// m_rst == 1
		(if_parcel_valid == 2'b00) &&
		(if_parcel_pc == 32'h00000000)
	endif &&

	(if_parcel_misaligned == 0) &&
	(if_parcel_page_fault == 0) &&
	(if_stall_nxt_pc == 0) &&

	// Clean the values if the parcel is not valid
	if (if_parcel_valid != 2'b11)
		(if_parcel == 32'h00000000)
	endif;
end constraint;

constraint c_dmem_response_simple :=
	if (!m_rst)
		exists i in 0..v_dmem_slack:
			next(dmem_ack,i) == 1
		end exists;
	else
		dmem_ack == 0
	endif &&

	(dmem_err == 0) &&
	(dmem_misaligned == 0) &&
	(dmem_page_fault == 0);
end constraint;

constraint c_dmem_response_complex :=
	if (!m_rst)

		if (dmem_req == 1)
			exists i in 0..v_dmem_slack:
				next(dmem_ack,i+1) == 1
			end exists
		endif &&

		if (next(dmem_ack, v_dmem_slack+1) == 1)
			exists i in 0..v_dmem_slack:
				next(dmem_req,i) == 1
			end exists
		endif &&

		foreach i in 0..v_dmem_slack:
			if (dmem_req == 1)
				if (next(dmem_ack,i+1) == dmem_req)
					next(dmem_ack,i+2) == next(dmem_req)
				endif
			endif
		end foreach &&

		if (fell(m_rst))
			foreach i in 0..v_dmem_slack:
				if (next(dmem_req,i) == 0)
					(next(dmem_ack,i+1) == 0)
				endif
			end foreach &&
			(dmem_ack == 0)
		endif

    else
    	dmem_ack == 0
	endif &&
   (dmem_err == 0) &&
   (dmem_misaligned == 0) &&
   (dmem_page_fault == 0);
end constraint;

constraint c_no_bu_flush :=
	if (!m_rst)
		((c/bu_flush == 0) || prev(m_rst));
	endif;
end constraint;

constraint c_if_nop :=
	if (!m_rst)
		c/if_instr == 32'h00000013;
	endif;
end constraint;

constraint c_id_nop :=
	if (!m_rst)
		c/id_instr == 32'h00000013;
	endif;
end constraint;

constraint c_ex_nop :=
	if (!m_rst)
		c/ex_instr == 32'h00000013;
	endif;
end constraint;

constraint c_no_ex_bubble :=
	if (!m_rst)
		c/ex_bubble == 0;
	endif;
end constraint;

constraint c_dmem_ready :=
	if (!m_rst)
		dmem_ack == 1;
	endif;
end constraint;

constraint c_32bit_instr_only :=
	if (!m_rst)
		(&if_parcel[1:0] == 1);
	endif;
end constraint;

constraint c_no_exception :=
	if (!m_rst)
		(c/if_exception == 0) &&
		(c/id_exception == 0) &&
		(c/ex_exception == 0) &&
		(c/mem_exception == 0) &&
		(c/wb_exception == 0) &&
		(c/du_exceptions == 32'h00000000);
	endif;
end constraint;

  // CAUSE_MISALIGNED_INSTRUCTION   = 0,
  // CAUSE_INSTRUCTION_ACCESS_FAULT = 1,
  // CAUSE_ILLEGAL_INSTRUCTION      = 2,
  // CAUSE_BREAKPOINT               = 3,
  // CAUSE_MISALIGNED_LOAD          = 4,
  // CAUSE_LOAD_ACCESS_FAULT        = 5,
  // CAUSE_MISALIGNED_STORE         = 6,
  // CAUSE_STORE_ACCESS_FAULT       = 7,
  // CAUSE_UMODE_ECALL              = 8,
  // CAUSE_SMODE_ECALL              = 9,
  // CAUSE_HMODE_ECALL              = 10,
  // CAUSE_MMODE_ECALL              = 11,
  // CAUSE_INSTRUCTION_PAGE_FAULT   = 12,
  // CAUSE_LOAD_PAGE_FAULT          = 13,
  // CAUSE_STORE_PAGE_FAULT         = 15;

macro unsigned EXCEPTION_MASK := 16'b0000000000000100 end macro;

constraint c_exception_config :=
	if (!m_rst)
		((c/if_exception & EXCEPTION_MASK) == 0) &&
		((c/id_exception & EXCEPTION_MASK) == 0) &&
		((c/ex_exception & EXCEPTION_MASK) == 0) &&
		((c/mem_exception & EXCEPTION_MASK) == 0) &&
		((c/wb_exception & EXCEPTION_MASK) == 0);
	endif;
end constraint;

constraint c_no_id_hazard :=
	if (!m_rst)
		(((c/id_unit/if_src1 != c/id_unit/id_dst) || prev(m_rst)) &&
		((c/id_unit/if_src2 != c/id_unit/id_dst) || prev(m_rst)) &&
		((c/id_unit/if_src1 != c/id_unit/ex_dst) || prev(m_rst, 2)) &&
		((c/id_unit/if_src2 != c/id_unit/ex_dst) || prev(m_rst, 2)));
	endif;
end constraint;