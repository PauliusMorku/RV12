// Opcodes
macro unsigned OPCODE_U_LUI		:= 32'h00000037 end macro; //0110111
macro unsigned OPCODE_U_AUIPC 	:= 32'h00000017 end macro; //0010111
macro unsigned OPCODE_J_JAL		:= 32'h0000006F end macro; //1101111
macro unsigned OPCODE_I_JALR	:= 32'h00000067 end macro; //1100111
macro unsigned OPCODE_B			:= 32'h00000063 end macro; //1100011
macro unsigned OPCODE_I_L		:= 32'h00000003 end macro; //0000011
macro unsigned OPCODE_S			:= 32'h00000023 end macro; //0100011
macro unsigned OPCODE_I			:= 32'h00000013 end macro; //0010011
macro unsigned OPCODE_R			:= 32'h00000033 end macro; //0110011
macro unsigned OPCODE_MEM		:= 32'h0000000F end macro; //0001111
macro unsigned OPCODE_SYS		:= 32'h00000073 end macro; //1110011

// Functions
macro unsigned OPCODE_FIELD(unsigned x) 	:= ((x) & 32'h0000007F) end macro;
macro unsigned FUNCT3_FIELD(unsigned x) 	:= (((x) >> 12) & 32'h00000007) end macro;
macro unsigned FUNCT7_FIELD(unsigned x) 	:= (((x) >> 25) & 32'h0000007F) end macro;
macro unsigned RS1_FIELD(unsigned x)    	:= (((x) >> 15) & 32'h0000001F) end macro;
macro unsigned RS2_FIELD(unsigned x)    	:= (((x) >> 20) & 32'h0000001F) end macro;
macro unsigned RD_FIELD(unsigned x)     	:= (((x) >> 7) & 32'h0000001F) end macro;
macro unsigned SIGN_FIELD(unsigned x)   	:= (((x) >> 31) & 32'h00000001) end macro;
macro unsigned IMM_U_FIELD(unsigned x)      := ((x) & 32'hFFFFF000) end macro;
macro unsigned POS_IMM_I_FIELD(unsigned x)  := ((x) >> 20) end macro;
macro unsigned POS_IMM_S_FIELD(unsigned x)  := ((((x) >> 20) & 32'h00000FE0) | (((x) >> 7) & 32'h0000001F)) end macro;
macro unsigned POS_IMM_B_FIELD(unsigned x)  := ((((x) << 4) & 32'h00000800) | (((x) >> 20) & 32'h000007E0) | (((x) >> 7) & 32'h0000001E)) end macro;
macro unsigned POS_IMM_J_FIELD(unsigned x)  := (((x) & 32'h000FF000) | (((x) >> 9) & 32'h00000800) | (((x) >> 20) & 32'h000007FE)) end macro;
macro unsigned NEG_IMM_I_FIELD(unsigned x)  := (POS_IMM_I_FIELD(x) | 32'hFFFFF000) end macro;
macro unsigned NEG_IMM_S_FIELD(unsigned x)  := (POS_IMM_S_FIELD(x) | 32'hFFFFF000) end macro;
macro unsigned NEG_IMM_B_FIELD(unsigned x)  := (POS_IMM_B_FIELD(x) | 32'hFFFFF000) end macro;
macro unsigned NEG_IMM_J_FIELD(unsigned x)  := (POS_IMM_J_FIELD(x) | 32'hFFF00000) end macro;

macro unsigned getOpcode(unsigned encodedInstr) := OPCODE_FIELD(encodedInstr) end macro; 

macro unsigned getImmediate(unsigned encodedInstr) := 
    if (OPCODE_FIELD(encodedInstr) == OPCODE_I)
        if (SIGN_FIELD(encodedInstr) == 0)
            POS_IMM_I_FIELD(encodedInstr)
        else
            NEG_IMM_I_FIELD(encodedInstr)
        endif    
    elseif (OPCODE_FIELD(encodedInstr) == OPCODE_I_L)
        if (SIGN_FIELD(encodedInstr) == 0)
            POS_IMM_I_FIELD(encodedInstr)
        else
            NEG_IMM_I_FIELD(encodedInstr)
        endif
    elseif (OPCODE_FIELD(encodedInstr) == OPCODE_B)
        if (SIGN_FIELD(encodedInstr) == 0)
            POS_IMM_B_FIELD(encodedInstr)
        else
            NEG_IMM_B_FIELD(encodedInstr)
        endif
    elseif (OPCODE_FIELD(encodedInstr) == OPCODE_I_JALR)
        if (SIGN_FIELD(encodedInstr) == 0)
            POS_IMM_I_FIELD(encodedInstr)
        else
            NEG_IMM_I_FIELD(encodedInstr)
        endif
    elseif (OPCODE_FIELD(encodedInstr) == OPCODE_S)
        if (SIGN_FIELD(encodedInstr) == 0)
            POS_IMM_S_FIELD(encodedInstr)
        else
            NEG_IMM_S_FIELD(encodedInstr)
        endif
    elseif (OPCODE_FIELD(encodedInstr) == OPCODE_U_LUI)
        IMM_U_FIELD(encodedInstr)
    elseif (OPCODE_FIELD(encodedInstr) == OPCODE_U_AUIPC)
        IMM_U_FIELD(encodedInstr)
    elseif (OPCODE_FIELD(encodedInstr) == OPCODE_J_JAL)
        if (SIGN_FIELD(encodedInstr) == 0)
            POS_IMM_J_FIELD(encodedInstr)
        else
            NEG_IMM_J_FIELD(encodedInstr)
        endif
    else
        32'h00000000
    endif;
end macro;

macro expr getInstr(unsigned encodedInstr) := 
	if (encodedInstr == 32'hFFFFFFFF) INV_INSTR
	elseif 	(OPCODE_FIELD(encodedInstr) == OPCODE_U_LUI) LUI_INSTR
	elseif  (OPCODE_FIELD(encodedInstr) == OPCODE_U_AUIPC) AUIPC_INSTR
	elseif  (OPCODE_FIELD(encodedInstr) == OPCODE_J_JAL) JAL_INSTR
	elseif  (OPCODE_FIELD(encodedInstr) == OPCODE_I_JALR) JALR_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_B) && ((encodedInstr >> 12)[2:0] == 32'h00000000)) BEQ_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_B) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) BNE_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_B) && ((encodedInstr >> 12)[2:0] == 32'h00000004)) BLT_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_B) && ((encodedInstr >> 12)[2:0] == 32'h00000005)) BGE_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_B) && ((encodedInstr >> 12)[2:0] == 32'h00000006)) BLTU_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_B) && ((encodedInstr >> 12)[2:0] == 32'h00000007)) BGEU_INSTR
	elseif  (OPCODE_FIELD(encodedInstr) == OPCODE_B) UNKNW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I_L) && ((encodedInstr >> 12)[2:0] == 32'h00000000)) LB_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I_L) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) LH_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I_L) && ((encodedInstr >> 12)[2:0] == 32'h00000002)) LW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I_L) && ((encodedInstr >> 12)[2:0] == 32'h00000004)) LBU_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I_L) && ((encodedInstr >> 12)[2:0] == 32'h00000005)) LHU_INSTR
	elseif  (OPCODE_FIELD(encodedInstr) == OPCODE_I_L) UNKNW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_S) && ((encodedInstr >> 12)[2:0] == 32'h00000000)) SB_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_S) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) SH_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_S) && ((encodedInstr >> 12)[2:0] == 32'h00000002)) SW_INSTR
	elseif  (OPCODE_FIELD(encodedInstr) == OPCODE_S) UNKNW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I) && ((encodedInstr >> 12)[2:0] == 32'h00000000)) ADDI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) SLLI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I) && ((encodedInstr >> 12)[2:0] == 32'h00000002)) SLTI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I) && ((encodedInstr >> 12)[2:0] == 32'h00000003)) SLTIU_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I) && ((encodedInstr >> 12)[2:0] == 32'h00000004)) XORI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I) && ((encodedInstr >> 12)[2:0] == 32'h00000005) && ((encodedInstr >> 25)[6:0] == 32'h00000000)) SRLI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I) && ((encodedInstr >> 12)[2:0] == 32'h00000005) && ((encodedInstr >> 25)[6:0] == 32'h00000020)) SRAI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I) && ((encodedInstr >> 12)[2:0] == 32'h00000005)) UNKNW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I) && ((encodedInstr >> 12)[2:0] == 32'h00000006)) ORI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_I) && ((encodedInstr >> 12)[2:0] == 32'h00000007)) ANDI_INSTR
	elseif  (OPCODE_FIELD(encodedInstr) == OPCODE_I) UNKNW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000000)) ADD_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000020)) SUB_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000000)) UNKNW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) SLL_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000002)) SLT_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000003)) SLTU_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000004)) XOR_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000005) && ((encodedInstr >> 25)[6:0] == 32'h00000000)) SRL_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000005) && ((encodedInstr >> 25)[6:0] == 32'h00000020)) SRA_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000005)) UNKNW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000006)) OR_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_R) && ((encodedInstr >> 12)[2:0] == 32'h00000007)) AND_INSTR
	elseif  (OPCODE_FIELD(encodedInstr) == OPCODE_R) UNKNW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_MEM) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr & 32'hF00F8F80) == 32'h00000000)) FENCE_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_MEM) && ((encodedInstr >> 12)[2:0] == 32'h00000001) && ((encodedInstr & 32'hFFFF8F80) == 32'h00000000)) FENCEI_INSTR
	elseif  (OPCODE_FIELD(encodedInstr) == OPCODE_MEM) UNKNW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000000) && ((encodedInstr >> 20)[4:0] == 32'h00000000) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) ECALL_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000000) && ((encodedInstr >> 20)[4:0] == 32'h00000001) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) EBREAK_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) CSRRW_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000002)) CSRRS_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000003)) CSRRC_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000005)) CSRRWI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000006)) CSRRSI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000007)) CSRRCI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000000) && ((encodedInstr >> 20)[4:0] == 32'h00000002) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) URET_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000008) && ((encodedInstr >> 20)[4:0] == 32'h00000002) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) SRET_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000018) && ((encodedInstr >> 20)[4:0] == 32'h00000002) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) MRET_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000008) && ((encodedInstr >> 20)[4:0] == 32'h00000005) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) WFI_INSTR
	elseif ((OPCODE_FIELD(encodedInstr) == OPCODE_SYS) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000009) && ((encodedInstr >>  7)[4:0] == 32'h00000000)) SFENCEVMA_INSTR
	elseif  (OPCODE_FIELD(encodedInstr) == OPCODE_SYS) UNKNW_INSTR
	else UNKNW_INSTR
	endif
end macro; 



macro expr getALUFunc(expr instr) := 
	if ((instr == ADD_INSTR) || (instr == ADDI_INSTR)) ALUF_ADD
	elseif (instr == SUB_INSTR) ALUF_SUB
	elseif ((instr == SLL_INSTR) || (instr == SLLI_INSTR)) ALUF_SLL
	elseif ((instr == SLT_INSTR) || (instr == SLTI_INSTR)) ALUF_SLT
	elseif ((instr == SLTU_INSTR) || (instr == SLTIU_INSTR)) ALUF_SLTU
	elseif ((instr == XOR_INSTR) || (instr == XORI_INSTR)) ALUF_XOR
	elseif ((instr == SRL_INSTR) || (instr == SRLI_INSTR)) ALUF_SRL
	elseif ((instr == SRA_INSTR) || (instr == SRAI_INSTR)) ALUF_SRA
	elseif ((instr == OR_INSTR) || (instr == ORI_INSTR)) ALUF_OR
	elseif ((instr == AND_INSTR) || (instr == ANDI_INSTR)) ALUF_AND
	elseif (((((instr == LB_INSTR) || (instr == LH_INSTR)) || (instr == LW_INSTR)) || (instr == LBU_INSTR)) || (instr == LHU_INSTR)) ALUF_ADD
	elseif ((instr == JALR_INSTR) || (instr == JAL_INSTR)) ALUF_X
	elseif ((instr == BEQ_INSTR) || (instr == BNE_INSTR)) ALUF_SUB
	elseif ((instr == BLT_INSTR) || (instr == BGE_INSTR)) ALUF_SLT
	elseif ((instr == BLTU_INSTR) || (instr == BGEU_INSTR)) ALUF_SLTU
	elseif (((instr == SB_INSTR) || (instr == SH_INSTR)) || (instr == SW_INSTR)) ALUF_ADD
	elseif (instr == AUIPC_INSTR) ALUF_ADD
	elseif (instr == LUI_INSTR) ALUF_COPY1
	else ALUF_X
	endif
end macro;

macro unsigned getALUResult(expr func; unsigned op1; unsigned op2) := 
	if (func == ALUF_ADD) 										(op1 + op2)[31:0]
	elseif (func == ALUF_SUB) 									unsigned((op1 - op2)[31:0])
	elseif (func == ALUF_AND) 									(op1 & op2)
	elseif (func == ALUF_OR) 									(op1 | op2)
	elseif (func == ALUF_XOR) 									(op1 ^ op2)
	elseif (func == ALUF_SLT)
		if (signed(op1) < signed(op2)) 							1
		else 													0
		endif;
	elseif (func == ALUF_SLTU)
		if ((op1 < op2)) 										1
		else 													0
		endif;
	elseif (func == ALUF_SLL) 									(op1 << op2[4:0])
	elseif (func == ALUF_SRA) 									unsigned(signed(op1) >> signed(op2[4:0]))
	elseif (func == ALUF_SRL) 									(op1 >> op2[4:0])
	elseif (func == ALUF_COPY1) 								op1
	else 														0
	endif
end macro;

// unsigned int ISA::getBranchResult(unsigned int encodedInstr, unsigned int ALUResult, unsigned int PCReg) const {
//     if (getInstr(encodedInstr) == INSTR_BEQ && ALUResult == 0) {
//         return PCReg + getImmediate(encodedInstr);
//     } else if (getInstr(encodedInstr) == INSTR_BNE && ALUResult != 0) {
//         return PCReg + getImmediate(encodedInstr);
//     } else if (getInstr(encodedInstr) == INSTR_BLT && ALUResult == 1) {
//         return PCReg + getImmediate(encodedInstr);
//     } else if (getInstr(encodedInstr) == INSTR_BGE && ALUResult == 0) {
//         return PCReg + getImmediate(encodedInstr);
//     } else if (getInstr(encodedInstr) == INSTR_BLTU && ALUResult == 1) {
//         return PCReg + getImmediate(encodedInstr);
//     } else if (getInstr(encodedInstr) == INSTR_BGEU && ALUResult == 0) {
//         return PCReg + getImmediate(encodedInstr);
//     } else {
//         return PCReg + 4;
//     }
// }

// ME_MaskType ISA::getMemoryMask(Instr_t instr) const {
//     if (instr == INSTR_LW || instr == INSTR_SW) {
//         return MT_W;
//     } else if (instr == INSTR_LH || instr == INSTR_SH) {
//         return MT_H;
//     } else if (instr == INSTR_LB || instr == INSTR_SB) {
//         return MT_B;
//     } else if (instr == INSTR_LHU) {
//         return MT_HU;
//     } else if (instr == INSTR_LBU) {
//         return MT_BU;
//     } else return MT_X;
// }