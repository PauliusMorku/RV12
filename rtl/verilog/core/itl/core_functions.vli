// Constants used for instruction filters
macro unsigned OPCODE_U_LUI		:= 32'h00000037 end macro; //0110111
macro unsigned OPCODE_U_AUIPC 	:= 32'h00000017 end macro; //0010111
macro unsigned OPCODE_J_JAL		:= 32'h0000006F end macro; //1101111
macro unsigned OPCODE_I_JALR	:= 32'h00000067 end macro; //1100111
macro unsigned OPCODE_B			:= 32'h00000063 end macro; //1100011
macro unsigned OPCODE_I_L		:= 32'h00000003 end macro; //0000011
macro unsigned OPCODE_S			:= 32'h00000023 end macro; //0100011
macro unsigned OPCODE_I			:= 32'h00000013 end macro; //0010011
macro unsigned OPCODE_R			:= 32'h00000033 end macro; //0110011
macro unsigned OPCODE_MEM		:= 32'h0000000F end macro; //0001111
macro unsigned OPCODE_SYS		:= 32'h00000073 end macro; //1110011

// Functions

macro unsigned getOpcode(unsigned encodedInstr) := encodedInstr[6:0] end macro; 

macro expr getInstr(unsigned encodedInstr) := 
	if 	    (encodedInstr[6:0] == 32'h00000037) LUI_INSTR
	elseif  (encodedInstr[6:0] == 32'h00000017) AUIPC_INSTR
	elseif  (encodedInstr[6:0] == 32'h0000006F) JAL_INSTR
	elseif  (encodedInstr[6:0] == 32'h00000067) JALR_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000063) && ((encodedInstr >> 12)[2:0] == 32'h00000000)) BEQ_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000063) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) BNE_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000063) && ((encodedInstr >> 12)[2:0] == 32'h00000004)) BLT_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000063) && ((encodedInstr >> 12)[2:0] == 32'h00000005)) BGE_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000063) && ((encodedInstr >> 12)[2:0] == 32'h00000006)) BLTU_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000063) && ((encodedInstr >> 12)[2:0] == 32'h00000007)) BGEU_INSTR
	elseif  (encodedInstr[6:0] == 32'h00000063) UNKNOWN_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000003) && ((encodedInstr >> 12)[2:0] == 32'h00000000)) LB_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000003) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) LH_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000003) && ((encodedInstr >> 12)[2:0] == 32'h00000002)) LW_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000003) && ((encodedInstr >> 12)[2:0] == 32'h00000004)) LBU_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000003) && ((encodedInstr >> 12)[2:0] == 32'h00000005)) LHU_INSTR
	elseif  (encodedInstr[6:0] == 32'h00000003) UNKNOWN_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000023) && ((encodedInstr >> 12)[2:0] == 32'h00000000)) SB_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000023) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) SH_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000023) && ((encodedInstr >> 12)[2:0] == 32'h00000002)) SW_INSTR
	elseif  (encodedInstr[6:0] == 32'h00000023) UNKNOWN_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000013) && ((encodedInstr >> 12)[2:0] == 32'h00000000)) ADDI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000013) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) SLLI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000013) && ((encodedInstr >> 12)[2:0] == 32'h00000002)) SLTI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000013) && ((encodedInstr >> 12)[2:0] == 32'h00000003)) SLTIU_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000013) && ((encodedInstr >> 12)[2:0] == 32'h00000004)) XORI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000013) && ((encodedInstr >> 12)[2:0] == 32'h00000005) && ((encodedInstr >> 25)[6:0] == 32'h00000000)) SRLI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000013) && ((encodedInstr >> 12)[2:0] == 32'h00000005) && ((encodedInstr >> 25)[6:0] == 32'h00000020)) SRAI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000013) && ((encodedInstr >> 12)[2:0] == 32'h00000005)) UNKNOWN_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000013) && ((encodedInstr >> 12)[2:0] == 32'h00000006)) ORI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000013) && ((encodedInstr >> 12)[2:0] == 32'h00000007)) ANDI_INSTR
	elseif  (encodedInstr[6:0] == 32'h00000013) UNKNOWN_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000000)) ADD_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000020)) SUB_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000000)) UNKNOWN_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) SLL_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000002)) SLT_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000003)) SLTU_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000004)) XOR_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000005) && ((encodedInstr >> 25)[6:0] == 32'h00000000)) SRL_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000005) && ((encodedInstr >> 25)[6:0] == 32'h00000020)) SRA_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000005)) UNKNOWN_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000006)) OR_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000033) && ((encodedInstr >> 12)[2:0] == 32'h00000007)) AND_INSTR
	elseif  (encodedInstr[6:0] == 32'h00000033) UNKNOWN_INSTR
	elseif ((encodedInstr[6:0] == 32'h0000000F) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr & 32'hF00F8F80) == 32'h00000000)) FENCE_INSTR
	elseif ((encodedInstr[6:0] == 32'h0000000F) && ((encodedInstr >> 12)[2:0] == 32'h00000001) && ((encodedInstr & 32'hFFFF8F80) == 32'h00000000)) FENCEI_INSTR
	elseif  (encodedInstr[6:0] == 32'h0000000F) UNKNOWN_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000000) && ((encodedInstr >> 20)[4:0] == 32'h00000000) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) ECALL_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000000) && ((encodedInstr >> 20)[4:0] == 32'h00000001) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) EBREAK_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000001)) CSRRW_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000002)) CSRRS_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000003)) CSRRC_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000005)) CSRRWI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000006)) CSRRSI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000007)) CSRRCI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000000) && ((encodedInstr >> 20)[4:0] == 32'h00000002) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) URET_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000008) && ((encodedInstr >> 20)[4:0] == 32'h00000002) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) SRET_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000018) && ((encodedInstr >> 20)[4:0] == 32'h00000002) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) MRET_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000008) && ((encodedInstr >> 20)[4:0] == 32'h00000005) && ((encodedInstr >> 32'h0000000F)[4:0] == 32'h00000000) && ((encodedInstr >> 7)[4:0] == 32'h00000000)) WFI_INSTR
	elseif ((encodedInstr[6:0] == 32'h00000073) && ((encodedInstr >> 12)[2:0] == 32'h00000000) && ((encodedInstr >> 25)[6:0] == 32'h00000009) && ((encodedInstr >>  7)[4:0] == 32'h00000000)) SFENCEVMA_INSTR
	elseif  (encodedInstr[6:0] == 32'h00000073) UNKNOWN_INSTR
	else UNKNOWN_INSTR
endif
end macro; 

/*
macro ALUFunc_t getALUFunc(Instr_t instr) := 
	if ((instr == ADD_INSTR) || (instr == ADDI_INSTR)) ALUF_ADD
	elseif (instr == SUB_INSTR) ALUF_SUB
	elseif ((instr == SLL_INSTR) || (instr == SLLI_INSTR)) ALUF_SLL
	elseif ((instr == SLT_INSTR) || (instr == SLTI_INSTR)) ALUF_SLT
	elseif ((instr == SLTU_INSTR) || (instr == SLTIU_INSTR)) ALUF_SLTU
	elseif ((instr == XOR_INSTR) || (instr == XORI_INSTR)) ALUF_XOR
	elseif ((instr == SRL_INSTR) || (instr == SRLI_INSTR)) ALUF_SRL
	elseif ((instr == SRA_INSTR) || (instr == SRAI_INSTR)) ALUF_SRA
	elseif ((instr == OR_INSTR) || (instr == ORI_INSTR)) ALUF_OR
	elseif ((instr == AND_INSTR) || (instr == ANDI_INSTR)) ALUF_AND
	elseif (((((instr == LB_INSTR) || (instr == LH_INSTR)) || (instr == LW_INSTR)) || (instr == LBU_INSTR)) || (instr == LHU_INSTR)) ALUF_ADD
	elseif ((instr == JALR_INSTR) || (instr == JAL_INSTR)) ALUF_X
	elseif ((instr == BEQ_INSTR) || (instr == BNE_INSTR)) ALUF_SUB
	elseif ((instr == BLT_INSTR) || (instr == BGE_INSTR)) ALUF_SLT
	elseif ((instr == BLTU_INSTR) || (instr == BGEU_INSTR)) ALUF_SLTU
	elseif (((instr == SB_INSTR) || (instr == SH_INSTR)) || (instr == SW_INSTR)) ALUF_ADD
	elseif (instr == AUIPC_INSTR) ALUF_ADD
	elseif (instr == LUI_INSTR) ALUF_COPY1
	else ALUF_X
	endif
end macro;

macro unsigned getALUResult(ALUFunc_t func; unsigned op1; unsigned op2) := 
	if (func == ALUF_ADD) 										(op1 + op2)[31:0]
	elseif (func == ALUF_SUB) 									(op1 - op2)[31:0]
	elseif (func == ALUF_AND) 									(op1 & op2)
	elseif (func == ALUF_OR) 									(op1 | op2)
	elseif (func == ALUF_XOR) 									(op1 ^ op2)
	elseif ((func == ALUF_SLT) && (signed(op1) < signed(op2))) 	1
	elseif ((func == ALUF_SLTU) && (op1 < op2)) 				1
	elseif (func == ALUF_SLL) 									(op1 << op2[4:0])
	elseif (func == ALUF_SRA) 									(signed(op1) >> signed(op2[4:0]))
	elseif (func == ALUF_SRL) 									(op1 >> op2[4:0])
	elseif (func == ALUF_COPY1) 								op1
	else 														0
	endif
end macro;
*/