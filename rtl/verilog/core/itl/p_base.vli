/*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

888                                 
888                                 
888                                 
88888b.   8888b.  .d8888b   .d88b.  
888 "88b     "88b 88K      d8P  Y8b 
888  888 .d888888 "Y8888b. 88888888 
888 d88P 888  888      X88 Y8b.     
88888P"  "Y888888  88888P'  "Y8888  
                                                      
*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

property base;
dependencies: c_no_reset, c_no_debug, c_32bit_instr_only, c_no_st_flush, c_imem_response, c_imem_fairness, c_dmem_response, c_dmem_fairness;
for timepoints:
	t1_PF_rx_f = t + 0..v_examination_window waits_for complete mg_tn_PF_rx(1),

	//t1_PF_port_rx = t + 0..v_examination_window waits_for complete mg_tn_PF_port_rx(1),

	t1_PF_tx_f = t + 0..v_examination_window waits_for complete mg_tn_PF_tx(1),
	t1_PF_tx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_PF_tx_wait),
	t1_PF_tx_l = max_timepoint(t1_PF_tx_l1, t1_PF_rx_f),

	t1_IF_rx_f = t + 0..v_examination_window waits_for complete mg_tn_IF_rx(1),
	t1_IF_rx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_IF_rx_wait),
	t1_IF_rx_l = max_timepoint(t1_IF_rx_l1, t1_PF_tx_l), 

	t1_IF_tx_f = t + 0..v_examination_window waits_for complete mg_tn_IF_tx(1),
	t1_IF_tx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_IF_tx_wait),
	t1_IF_tx_l = max_timepoint(t1_IF_tx_l1, t1_IF_rx_f),

	t1_ID_rx_f = t + 0..v_examination_window waits_for complete mg_tn_ID_rx(1),
	t1_ID_rx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_ID_rx_wait),
	t1_ID_rx_l = max_timepoint(t1_ID_rx_l1, t1_IF_tx_l), 

	t1_ID_tx_f = t + 0..v_examination_window waits_for complete mg_tn_ID_tx(1),
	t1_ID_tx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_ID_tx_wait),
	t1_ID_tx_l = max_timepoint(t1_ID_tx_l1, t1_ID_rx_l),

	t1_EX_rx_f = t + 0..v_examination_window waits_for complete mg_tn_EX_rx(1),
	t1_EX_rx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_EX_rx_wait),
	t1_EX_rx_l = max_timepoint(t1_EX_rx_l1, t1_ID_tx_l),

	t1_EX_tx_f = t + 0..v_examination_window waits_for complete mg_tn_EX_tx(1),
	t1_EX_tx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_EX_tx_wait),
	t1_EX_tx_l = max_timepoint(t1_EX_tx_l1, t1_EX_rx_l),

	t1_ME_rx_f = t + 0..v_examination_window waits_for complete mg_tn_ME_rx(1),
	t1_ME_rx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_ME_rx_wait),
	t1_ME_rx_l = max_timepoint(t1_ME_rx_l1, t1_EX_tx_l),

	t1_ME_tx_f = t + 0..v_examination_window waits_for complete mg_tn_ME_tx(1),
	t1_ME_tx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_ME_tx_wait),
	t1_ME_tx_l = max_timepoint(t1_ME_tx_l1, t1_ME_rx_l),

	t1_WB_rx_f = t + 0..v_examination_window waits_for complete mg_tn_WB_rx(1),
	t1_WB_rx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_WB_rx_wait),
	t1_WB_rx_l = max_timepoint(t1_WB_rx_l1, t1_ME_tx_l),

	t1_WB_tx_f = t + 0..v_examination_window waits_for complete mg_tn_WB_tx(1),
	t1_WB_tx_l1 = t + 0..v_examination_window waits_for complete mg_flag_wait(t1_WB_tx_wait),
	t1_WB_tx_l = max_timepoint(t1_WB_tx_l1, t1_WB_rx_l),


	t1_flush_f = t + 0..v_examination_window waits_for complete mg_tn_flush(1),

	t_dummy = t; // last dummy line (for the semicolon)

freeze:
	at_t1_PF_tx_exist = mg_tn_PF_tx(1)@t1_PF_tx_f,
	at_t1_IF_rx_exist = mg_tn_IF_rx(1)@t1_IF_rx_f,
	at_t1_IF_tx_exist = mg_tn_IF_tx(1)@t1_IF_tx_f,
	at_t1_ID_rx_exist = mg_tn_ID_rx(1)@t1_ID_rx_f,
	at_t1_ID_tx_exist = mg_tn_ID_tx(1)@t1_ID_tx_f,
	at_t1_EX_rx_exist = mg_tn_EX_rx(1)@t1_EX_rx_f,
	at_t1_EX_tx_exist = mg_tn_EX_tx(1)@t1_EX_tx_f,
	at_t1_ME_rx_exist = mg_tn_ME_rx(1)@t1_ME_rx_f,
	at_t1_ME_tx_exist = mg_tn_ME_tx(1)@t1_ME_tx_f,
	at_t1_WB_rx_exist = mg_tn_WB_rx(1)@t1_WB_rx_f,
	at_t1_WB_tx_exist = mg_tn_WB_tx(1)@t1_WB_tx_f,

	at_t1_PF_tx_instr = m_PF_instr@t1_PF_tx_f,
	at_t1_IF_tx_instr = m_IF_instr@t1_IF_tx_f,
	at_t1_ID_tx_instr = m_ID_instr@t1_ID_tx_f,
	at_t1_EX_tx_instr = m_EX_instr@t1_EX_tx_f,
	at_t1_ME_tx_instr = m_ME_instr@t1_ME_tx_f,
	at_t1_WB_tx_instr = m_WB_instr@t1_WB_tx_f,

	at_t1_PF_tx_pc = m_PF_pc@t1_PF_tx_f,
	at_t1_IF_tx_pc = m_IF_pc@t1_IF_tx_f,
	at_t1_ID_tx_pc = m_ID_pc@t1_ID_tx_f,
	at_t1_EX_tx_pc = m_EX_pc@t1_EX_tx_f,
	at_t1_ME_tx_pc = m_ME_pc@t1_ME_tx_f,
	at_t1_WB_tx_pc = m_WB_pc@t1_WB_tx_f,

	//at_t1_if_parcel = if_parcel@t1_PF_port_rx,

	at_t_dummy = clk@t_dummy; // last dummy line (for the semicolon)

assume:
    reset_sequence;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Framework setup
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Define transaction flag variables
	mg_flag_define(t1_PF_tx_wait, at_t1_PF_tx_exist, v_examination_window, t1_PF_tx_f, t);
	mg_flag_define(t1_IF_rx_wait, at_t1_IF_rx_exist, v_examination_window, t1_IF_rx_f, t);
	mg_flag_define(t1_IF_tx_wait, at_t1_IF_tx_exist, v_examination_window, t1_IF_tx_f, t);
	mg_flag_define(t1_ID_rx_wait, at_t1_ID_rx_exist, v_examination_window, t1_ID_rx_f, t);
	mg_flag_define(t1_ID_tx_wait, at_t1_ID_tx_exist, v_examination_window, t1_ID_tx_f, t);
	mg_flag_define(t1_EX_rx_wait, at_t1_EX_rx_exist, v_examination_window, t1_EX_rx_f, t);
	mg_flag_define(t1_EX_tx_wait, at_t1_EX_tx_exist, v_examination_window, t1_EX_tx_f, t);
	mg_flag_define(t1_ME_rx_wait, at_t1_ME_rx_exist, v_examination_window, t1_ME_rx_f, t);
	mg_flag_define(t1_ME_tx_wait, at_t1_ME_tx_exist, v_examination_window, t1_ME_tx_f, t);
	mg_flag_define(t1_WB_rx_wait, at_t1_WB_rx_exist, v_examination_window, t1_WB_rx_f, t);
	mg_flag_define(t1_WB_tx_wait, at_t1_WB_tx_exist, v_examination_window, t1_WB_tx_f, t);

    // Reset window counters
	at t: PF_wcnt == 0;
	at t: IF_wcnt == 0;
	at t: ID_wcnt == 0;
	at t: EX_wcnt == 0;
	at t: ME_wcnt == 0;
	at t: WB_wcnt == 0;

	// Define window counter triggers
	during[t,t+v_examination_window]: PF_wcnt_inc == m_PF_rx;
	during[t,t+v_examination_window]: IF_wcnt_inc == m_IF_rx;
	during[t,t+v_examination_window]: ID_wcnt_inc == m_ID_rx;
	during[t,t+v_examination_window]: EX_wcnt_inc == m_EX_rx;
	during[t,t+v_examination_window]: ME_wcnt_inc == m_ME_rx;
	during[t,t+v_examination_window]: WB_wcnt_inc == m_WB_rx;

	// Define token remove triggers
	during[t,t+v_examination_window]: PF_trem == m_PF_tx;
	during[t,t+v_examination_window]: IF_trem == m_IF_tx;
	during[t,t+v_examination_window]: ID_trem == m_ID_tx;
	during[t,t+v_examination_window]: EX_trem == m_EX_tx;
	during[t,t+v_examination_window]: ME_trem == m_ME_tx;
	during[t,t+v_examination_window]: WB_trem == m_WB_tx;

	// Define instruction enumerators (only for debugging)
	during[t,t+v_examination_window]: IN_instr_enum == getInstr(if_parcel);
	during[t,t+v_examination_window]: PF_instr_enum == getInstr(m_PF_instr);
	during[t,t+v_examination_window]: IF_instr_enum == getInstr(m_IF_instr);
	during[t,t+v_examination_window]: ID_instr_enum == getInstr(m_ID_instr);
	during[t,t+v_examination_window]: EX_instr_enum == getInstr(m_EX_instr);
	during[t,t+v_examination_window]: ME_instr_enum == getInstr(m_ME_instr);
	during[t,t+v_examination_window]: WB_instr_enum == getInstr(m_WB_instr);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

prove:
	at t1_PF_rx_f: mg_tn_PF_rx(1);
	at t1_flush_f: mg_tn_flush(1) == false;

	at t1_PF_tx_f: if (at_t1_PF_tx_exist) m_PF_instr == ((prev(if_parcel) != INSTR_WFI) ? prev(if_parcel) : INSTR_NOP) endif;
	at t1_IF_tx_f: if (at_t1_IF_tx_exist) m_IF_instr == at_t1_PF_tx_instr endif;
	at t1_ID_tx_f: if (at_t1_ID_tx_exist) m_ID_instr == at_t1_IF_tx_instr endif;
	at t1_EX_tx_f: if (at_t1_EX_tx_exist) m_EX_instr == at_t1_ID_tx_instr endif;
	at t1_ME_tx_f: if (at_t1_ME_tx_exist) m_ME_instr == at_t1_EX_tx_instr endif;
	at t1_WB_tx_f: if (at_t1_WB_tx_exist) m_WB_instr == at_t1_ME_tx_instr endif;

	//at t1_PF_tx_f: m_PF_pc == PC_INIT;
	at t1_PF_tx_f: if (at_t1_PF_tx_exist) m_PF_pc == prev(if_parcel_pc) endif;
	at t1_IF_tx_f: if (at_t1_IF_tx_exist) m_IF_pc == at_t1_PF_tx_pc endif;
	at t1_ID_tx_f: if (at_t1_ID_tx_exist) m_ID_pc == at_t1_IF_tx_pc endif;
	at t1_EX_tx_f: if (at_t1_EX_tx_exist) m_EX_pc == at_t1_ID_tx_pc endif;
	at t1_ME_tx_f: if (at_t1_ME_tx_exist) m_ME_pc == at_t1_EX_tx_pc endif;
	at t1_WB_tx_f: if (at_t1_WB_tx_exist) m_WB_pc == at_t1_ME_tx_pc endif;

end property;