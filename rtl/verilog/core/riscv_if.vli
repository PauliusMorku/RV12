constraint no_id_stall :=
	id_stall == 0;
end constraint;

constraint no_flush :=
	bu_flush == 0 &&
	st_flush == 0 &&
	du_flush == 0;
end constraint;

constraint no_branch_predict :=
	bp_bp_predict == 2'b00;
end constraint;

constraint no_reset :=
	rstn == 1;
end constraint;

constraint no_if_stall_nxt_pc :=
	if_stall_nxt_pc == 0;
end constraint;


macro boolean instr_read_notify_m := (if_stall == 0) && (if_flush == 0); end macro;
macro boolean instr_read_sync_m := !(if_parcel_valid == 2'b00); end macro;


property reset_to_instr_read_notify;
dependencies:
	no_id_stall, no_flush, no_branch_predict, no_reset, no_if_stall_nxt_pc;
assume:
    reset_sequence;
prove:
	at t: instr_read_notify_m;
	at t: if_nxt_pc == PC_INIT;
end property;

property instr_read_notify;
dependencies:
	no_id_stall, no_flush, no_branch_predict, no_reset, no_if_stall_nxt_pc;
assume:
	at t: instr_read_notify_m;
	at t: !instr_read_sync_m;
prove:
	at t+1: instr_read_notify_m;
	at t+1: if_nxt_pc
end property;