constraint no_reset :=
	c/rstn == 1;
end constraint;

constraint no_stall :=
	//c/ex_stall == 0 &&
	c/du_stall == 0;
end constraint;

constraint no_flush :=
	c/bu_flush == 0 &&
	c/st_flush == 0 &&
	c/du_flush == 0;
end constraint;

constraint no_branch_predict :=
	c/if_unit/bp_bp_predict == 2'b00;
end constraint;

constraint no_if_stall_nxt_pc :=
	c/if_stall_nxt_pc == 0;
end constraint;

constraint if_nop :=
	c/if_instr == 32'h00000013;
end constraint;

constraint id_nop :=
	c/id_instr == 32'h00000013;
end constraint;

constraint ex_nop :=
	c/ex_instr == 32'h00000013;
end constraint;

constraint no_ex_bubble :=
	c/ex_bubble == 0;
end constraint;

constraint no_exception :=
	c/if_exception == 0 &&
	c/ex_exception == 0 &&
	c/mem_exception == 0 &&
	c/wb_exception == 0 &&
	c/id_exception == 0;
end constraint;

constraint no_id_hazard :=
	c/id_unit/if_src1 != c/id_unit/id_dst &&
	c/id_unit/if_src2 != c/id_unit/id_dst &&
	c/id_unit/if_src1 != c/id_unit/ex_dst &&
	c/id_unit/if_src2 != c/id_unit/ex_dst;
end constraint;

macro boolean id_in_notify_m := ((c/id_stall == 0) || !(c/ex_stall == 0)); end macro;
macro boolean id_in_sync_m := (c/if_bubble == 0); end macro;

macro boolean id_out_notify_m := (c/id_bubble == 0); end macro;
macro boolean id_out_sync_m := (c/ex_stall == 0); end macro;

property reset;
dependencies:
	no_reset;
assume:
    reset_sequence;
prove:
	at t: true;
end property;

property sample;
dependencies:
	no_reset;
assume:
	at t: true;
prove:
	at t+1: true;
end property;
