macro unsigned examination_window := 25 end macro;

macro logic m_IF_rx := ((c/if_unit/id_stall == 0) && (next(c/if_unit/if_bubble) == 0)) end macro;// && (next(c/if_unit/id_stall) == 0)) end macro;
macro logic m_ID_rx := (/*(c/id_unit/if_bubble == 0) && */(c/id_unit/stall == 0) && (c/id_unit/id_stall == 0)) end macro;
macro logic m_EX_rx := (/*(c/ex_units/id_bubble == 0) && */(c/ex_units/ex_stall == 0)) end macro;
macro logic m_ME_rx := ((c/mem_unit/wb_stall == 0)/* || (prev(m_EX_rx) && (c/ex_units/ex_stall == 0))*/) end macro; // either no bubble or instruction finished in EX stage (if it stalls then it is still computing)
macro logic m_WB_rx := ((c/wb_unit/wb_stall_o == 0)/* || prev(m_ME_rx)*/) end macro;

macro logic m_IF_tx := m_ID_rx end macro;
macro logic m_ID_tx := m_EX_rx end macro;
macro logic m_EX_tx := m_ME_rx end macro;
macro logic m_ME_tx := m_WB_rx end macro;
macro logic m_WB_tx := prev(c/wb_unit/wb_stall_o == 0) end macro;

macro logic m_IF_flush := 0 end macro;
macro logic m_ID_flush := (c/ex_units/bu_flush == 1) end macro;
macro logic m_EX_flush := (c/ex_units/bu_flush == 1) end macro;
macro logic m_ME_flush := 0 end macro;
macro logic m_WB_flush := 0 end macro;

// Instruction filters are used to constrain the instructions that are read from the memory (to avoid illegal instructions and reduce computation complexity)
macro bit instr_filter1(unsigned encodedInstr) := 
	/*(getOpcode(encodedInstr) == OPCODE_I_L) ||
	(getOpcode(encodedInstr) == OPCODE_S) ||
	(getOpcode(encodedInstr) == OPCODE_I) ||*/
	(getOpcode(encodedInstr) == OPCODE_R) /*||
	(getOpcode(encodedInstr) == OPCODE_B)*/
end macro;


macro bit instr_filter2(unsigned encodedInstr) := 
	/*(getInstr(encodedInstr) == INSTR_LW) ||
	(getInstr(encodedInstr) == INSTR_SW) ||
	(getInstr(encodedInstr) == INSTR_ADDI) ||*/
	(getInstr(encodedInstr) == INSTR_ADD) /*||
	(getInstr(encodedInstr) == INSTR_BEQ)*/
end macro;

/*
macro instr_filter3(unsigned encodedInstr) := 
	(getInstr(encodedInstr) == INSTR_LW && 
	((getImmediate(encodedInstr) 	& 32'hFFFFFFFC) = 0) && 
	((getRS1Addr(encodedInstr) 		& 32'hFFFFFFFC) = 0) && 
	((getRDAddr(encodedInstr) 		& 32'hFFFFFFFC) = 0)) 
	||
	(getInstr(encodedInstr) == INSTR_SW && 
	((getImmediate(encodedInstr) 	& 32'hFFFFFFFC) = 0) && 
	((getRS1Addr(encodedInstr) 		& 32'hFFFFFFFC) = 0) && 
	((getRS2Addr(encodedInstr) 		& 32'hFFFFFFFC) = 0)) 
	||
	(getInstr(encodedInstr) == INSTR_ADDI && 
	((getImmediate(encodedInstr) 	& 32'hFFFFFFFC) = 0) &&
	((getRS1Addr(encodedInstr) 		& 32'hFFFFFFFC) = 0) &&  
	((getRDAddr(encodedInstr) 		& 32'hFFFFFFFC) = 0)) 
	||
	(getInstr(encodedInstr) == INSTR_ADD && 
	((getRS1Addr(encodedInstr) 		& 32'hFFFFFFFC) = 0) && 
	((getRS2Addr(encodedInstr)		& 32'hFFFFFFFC) = 0) && 
	((getRDAddr(encodedInstr) 		& 32'hFFFFFFFC) = 0))
	||
	(getInstr(encodedInstr) == INSTR_BEQ && 
	((getRS1Addr(encodedInstr) 		& 32'hFFFFFFFC) = 0) && 
	((getRS2Addr(encodedInstr)		& 32'hFFFFFFFC) = 0))
end macro;
*/

constraint no_reset :=
	c/rstn == 1;
end constraint;

constraint c_no_debug :=
	c/dbg_stall == 0 &&
	c/du_flush == 0 &&
	c/du_stall == 0 &&
	c/du_stall_dly == 0;
end constraint;

constraint c_no_st_flush :=
	((c/st_flush == 0) || prev(c/rstn == 0));
end constraint;

constraint c_no_bu_flush :=
	((c/bu_flush == 0) || prev(c/rstn == 0));
end constraint;

constraint no_if_stall_nxt_pc :=
	c/if_stall_nxt_pc == 0;
end constraint;

constraint if_nop :=
	c/if_instr == 32'h00000013;
end constraint;

constraint id_nop :=
	c/id_instr == 32'h00000013;
end constraint;

constraint ex_nop :=
	c/ex_instr == 32'h00000013;
end constraint;

constraint no_ex_bubble :=
	c/ex_bubble == 0;
end constraint;

constraint dmem_ready :=
	dmem_ack == 1;
end constraint;

constraint c_dmem_fairness :=
	exists i in 0..3:
		next(dmem_ack,i) == 1;
	end exists;
end constraint;

constraint c_if_parcel_valid :=
	((c/if_unit/pd_bubble == 0) || prev(c/rstn == 0) || prev(c/rstn == 0, 2)); 
end constraint;

constraint c_if_parcel_valid2 :=
	(c/if_unit/if_parcel_misaligned == 0) &&
	(c/if_unit/if_parcel_page_fault == 0);
end constraint;

constraint c_if_parcel_valid_fairness :=
	exists i in 0..4:
		next(c/if_unit/pd_bubble,i) == 0;
	end exists;
end constraint;

constraint no_exception :=
	c/if_exception == 0 &&
	c/ex_exception == 0 &&
	c/mem_exception == 0 &&
	c/wb_exception == 0 &&
	c/id_exception == 0;
end constraint;

constraint no_id_hazard :=
	(((c/id_unit/if_src1 != c/id_unit/id_dst) || prev(c/rstn == 0)) &&
	((c/id_unit/if_src2 != c/id_unit/id_dst) || prev(c/rstn == 0)) &&
	((c/id_unit/if_src1 != c/id_unit/ex_dst) || prev(c/rstn == 0, 2)) &&
	((c/id_unit/if_src2 != c/id_unit/ex_dst) || prev(c/rstn == 0, 2)));
end constraint;

property reset;
dependencies:
	no_reset;
assume:
    reset_sequence;
prove:
	at t: true;
end property;

property sample;
dependencies:
	no_reset;
assume:
	at t: true;
prove:
	at t+1: true;
end property;

property test;
dependencies: no_reset, no_if_stall_nxt_pc, c_no_debug, c_dmem_fairness, no_exception, c_if_parcel_valid_fairness, c_no_st_flush;
for timepoints:
	t1_IF_rx = t,
	t1_ID_rx = t + 0..examination_window waits_for complete next(ID_tcnt == 1),
	t1_EX_rx = t + 0..examination_window waits_for complete next(EX_tcnt == 1),
	t1_ME_rx = t + 0..examination_window waits_for complete next(ME_tcnt == 1),
	t1_WB_rx = t + 0..examination_window waits_for complete next(WB_tcnt == 1),

	t2_IF_rx = t + 0..examination_window waits_for complete next(IF_tcnt == 2),
	t2_ID_rx = t + 0..examination_window waits_for complete next(ID_tcnt == 2),
	t2_EX_rx = t + 0..examination_window waits_for complete next(EX_tcnt == 2),
	t2_ME_rx = t + 0..examination_window waits_for complete next(ME_tcnt == 2),
	t2_WB_rx = t + 0..examination_window waits_for complete next(WB_tcnt == 2),


	t1_IF_tx = t + 1..examination_window waits_for complete ((m_IF_tx && (IF_tcnt == 1)) || (next(IF_tcnt) > 1)),
	t1_ID_tx = t + 1..examination_window waits_for complete ((m_ID_tx && (ID_tcnt == 1)) || (next(ID_tcnt) > 1)),
	t1_EX_tx = t + 1..examination_window waits_for complete ((m_EX_tx && (EX_tcnt == 1)) || (next(EX_tcnt) > 1)),
	t1_ME_tx = t + 1..examination_window waits_for complete ((m_ME_tx && (ME_tcnt == 1)) || (next(ME_tcnt) > 1)),
	t1_WB_tx = t + 1..examination_window waits_for complete ((m_WB_tx && (WB_tcnt == 1)) || (next(WB_tcnt) > 1)),

	t2_IF_tx = t + 1..examination_window waits_for complete ((m_IF_tx && (IF_tcnt == 2)) || (next(IF_tcnt) > 2)),
	t2_ID_tx = t + 1..examination_window waits_for complete ((m_ID_tx && (ID_tcnt == 2)) || (next(ID_tcnt) > 2)),
	t2_EX_tx = t + 1..examination_window waits_for complete ((m_EX_tx && (EX_tcnt == 2)) || (next(EX_tcnt) > 2)),
	t2_ME_tx = t + 1..examination_window waits_for complete ((m_ME_tx && (ME_tcnt == 2)) || (next(ME_tcnt) > 2)),
	t2_WB_tx = t + 1..examination_window waits_for complete ((m_WB_tx && (WB_tcnt == 2)) || (next(WB_tcnt) > 2)),

	// Detect flushing cases
	t1_IF_flush = t + 0..examination_window waits_for complete (m_IF_flush && (IF_tcnt == 1)),
	t1_ID_flush = t + 0..examination_window waits_for complete (m_ID_flush && (ID_tcnt == 1)),
	t1_EX_flush = t + 0..examination_window waits_for complete (m_EX_flush && (EX_tcnt == 1)),
	t1_ME_flush = t + 0..examination_window waits_for complete (m_ME_flush && (ME_tcnt == 1)),
	t1_WB_flush = t + 0..examination_window waits_for complete (m_WB_flush && (WB_tcnt == 1)),

	t2_IF_flush = t + 0..examination_window waits_for complete (m_IF_flush && (IF_tcnt == 2)),
	t2_ID_flush = t + 0..examination_window waits_for complete (m_ID_flush && (ID_tcnt == 2)),
	t2_EX_flush = t + 0..examination_window waits_for complete (m_EX_flush && (EX_tcnt == 2)),
	t2_ME_flush = t + 0..examination_window waits_for complete (m_ME_flush && (ME_tcnt == 2)),
	t2_WB_flush = t + 0..examination_window waits_for complete (m_WB_flush && (WB_tcnt == 2)),


	t_dummy = t; // last dummy line (for the semicolon)

freeze:
	// Freeze signals indicating flushing cases
	at_t1_IF_flush = m_IF_flush@t1_IF_flush,
	at_t1_ID_flush = m_ID_flush@t1_ID_flush,
	at_t1_EX_flush = m_EX_flush@t1_EX_flush,
	at_t1_ME_flush = m_ME_flush@t1_ME_flush,
	at_t1_WB_flush = m_WB_flush@t1_WB_flush,

	at_t2_IF_flush = m_IF_flush@t2_IF_flush,
	at_t2_ID_flush = m_ID_flush@t2_ID_flush,
	at_t2_EX_flush = m_EX_flush@t2_EX_flush,
	at_t2_ME_flush = m_ME_flush@t2_ME_flush,
	at_t2_WB_flush = m_WB_flush@t2_WB_flush,

	at_t2_IF_tx_instr = c/if_unit/if_instr@t2_IF_tx,
	at_t2_ID_tx_instr = c/id_unit/id_instr@t2_ID_tx,
	at_t2_EX_tx_instr = c/ex_units/ex_instr@t2_EX_tx,
	at_t2_ME_tx_instr = c/mem_unit/mem_instr@t2_ME_tx,
	at_t2_WB_tx_instr = c/wb_unit/wb_instr_o@t2_WB_tx,

	at_t2_IF_tx_pc = c/if_unit/if_pc@t2_IF_tx,
	at_t2_ID_tx_pc = c/id_unit/id_pc@t2_ID_tx,
	at_t2_EX_tx_pc = c/ex_units/ex_pc@t2_EX_tx,
	at_t2_ME_tx_pc = c/mem_unit/mem_pc@t2_ME_tx,
	at_t2_WB_tx_pc = c/wb_unit/wb_pc_o@t2_WB_tx,



	at_t_dummy = clk@t_dummy; // last dummy line (for the semicolon)

assume:
	// Property is triggered whenever a token successfully traverses the pipeline with no flushing
	at t1_IF_rx: next(IF_tcnt == 1);
	at t1_ID_rx: next(ID_tcnt == 1);
	at t1_EX_rx: next(EX_tcnt == 1);
	at t1_ME_rx: next(ME_tcnt == 1);
	at t1_WB_rx: next(WB_tcnt == 1);

	// Connect token counters
	at t: IF_tcnt == 0;
	during[t_first,t+examination_window]: IF_tcnt_inc == m_IF_rx;
	at t: ID_tcnt == 0;
	during[t_first,t_last]: ID_tcnt_inc == m_ID_rx;
	at t: EX_tcnt == 0;
	during[t_first,t_last]: EX_tcnt_inc == m_EX_rx;
	at t: ME_tcnt == 0;
	during[t_first,t_last]: ME_tcnt_inc == m_ME_rx;
	at t: WB_tcnt == 0;
	during[t_first,t_last]: WB_tcnt_inc == m_WB_rx;


	//at t2_ID_rx: c/id_unit/bu_flush == 1;
	//during[t_first,t_last]: instr_filter2(unsigned(c/if_instr)) == true;

	// Detect token flushing
	during[t_first,t_last]: t1_flush == (at_t1_IF_flush || at_t1_ID_flush || at_t1_EX_flush || at_t1_ME_flush || at_t1_WB_flush);
	during[t_first,t_last]: t2_flush == (at_t2_IF_flush || at_t2_ID_flush || at_t2_EX_flush || at_t2_ME_flush || at_t2_WB_flush);

	// Make sure that property does not start at flushing and no flushing occur withing the window
	at t: t1_flush == 0;
	at t: t2_flush == 1;

prove:
	true;

	at t: at_t2_IF_tx_instr == at_t2_ID_tx_instr;
	at t: at_t2_ID_tx_instr == at_t2_EX_tx_instr;
	at t: at_t2_EX_tx_instr == at_t2_ME_tx_instr;
	at t: at_t2_ME_tx_instr == at_t2_WB_tx_instr;

	at t2_ID_tx: c/id_unit/id_pc == at_t2_IF_tx_pc;
	at t2_EX_tx: at_t2_EX_tx_pc == at_t2_ID_tx_pc;
	at t2_ME_tx: at_t2_ME_tx_pc == at_t2_EX_tx_pc;
	at t2_WB_tx: at_t2_WB_tx_pc == at_t2_ME_tx_pc;


	// Prove that events take place
	at t1_IF_tx: m_IF_tx && (IF_tcnt == 1);
	at t1_ID_tx: m_ID_tx && (ID_tcnt == 1);
	at t1_EX_tx: m_EX_tx && (EX_tcnt == 1);
	at t1_ME_tx: m_ME_tx && (ME_tcnt == 1);
	at t1_WB_tx: m_WB_tx && (WB_tcnt == 1);

	// Prove right hook
	at t2_IF_rx: next(IF_tcnt == 2);
	at t2_IF_tx: m_IF_tx && (IF_tcnt == 2);
	at t2_ID_rx: next(ID_tcnt == 2);
	at t2_ID_tx: m_ID_tx && (ID_tcnt == 2);
	at t2_EX_rx: next(EX_tcnt == 2);
	at t2_EX_tx: m_EX_tx && (EX_tcnt == 2);
	at t2_ME_rx: next(ME_tcnt == 2);
	at t2_ME_tx: m_ME_tx && (ME_tcnt == 2);
	at t2_WB_rx: next(WB_tcnt == 2);
	at t2_WB_tx: m_WB_tx && (WB_tcnt == 2);

end property;
